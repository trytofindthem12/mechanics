Examination Timetabling Optimization

Project Overview

This project aims to solve the examination timetabling problem using a combination of genetic algorithms and Hopfield networks. The goal is to create an examination timetable that minimizes conflicts for students and efficiently allocates exams to available timeslots. The project uses input data from two files, kfu-s-93.stu and kfu-s-93.crs, which contain information about student exam registrations and course details, respectively.

Problem Statement

Examination timetabling is a complex problem faced by educational institutions. The objective is to schedule exams in such a way that no student has overlapping exams while minimizing the number of timeslots used. This project addresses this problem by combining heuristic optimization (genetic algorithms) with neural networks (Hopfield networks) to find an optimal or near-optimal solution.

Solution Overview

The solution involves three main components:

Data Parsing
Genetic Algorithm
Hopfield Network
1. Data Parsing
The DataParser.java class is responsible for reading and parsing the input files to extract the necessary data about students' exams and course details.

parseStudents: This method reads the kfu-s-93.stu file, which contains student exam registrations. It creates a mapping of students to their respective exams.
parseCourses: This method reads the kfu-s-93.crs file, which contains course details. It creates a mapping of courses with their respective details.
2. Genetic Algorithm
The GeneticAlgorithm.java class implements a genetic algorithm to generate an initial population of timetables and evolve them over generations to minimize exam conflicts.

evaluateTimetable: Evaluates a given timetable based on the number of conflicts (clashes) it has. A lower number of clashes indicates a better timetable.
generateInitialPopulation: Generates an initial population of random timetables.
select: Selects the best-performing timetables from the current population based on their fitness (number of conflicts).
crossover: Combines two parent timetables to produce a child timetable by exchanging parts of the parents' genetic material.
mutate: Introduces random changes to a timetable to maintain genetic diversity and explore new solutions.
geneticAlgorithm: The main method that runs the genetic algorithm, iterating through generations to evolve the population towards optimal timetables.
3. Hopfield Network
The HopfieldNetwork.java class implements a Hopfield network to further optimize the timetables generated by the genetic algorithm. A Hopfield network is a type of recurrent artificial neural network that can store and recall patterns.

train: Trains the Hopfield network using a set of patterns (timetables). The network learns the patterns by adjusting the weights between neurons.
run: Runs the Hopfield network to optimize a given timetable by iteratively reducing conflicts.
Integration of Components
The TimetableOptimization.java class integrates the genetic algorithm and Hopfield network to produce and optimize the examination timetable.

main: The main method orchestrates the entire process. It:
Parses the input data files using DataParser.
Initializes and runs the genetic algorithm to generate an initial population of timetables.
Selects the best timetable from the population.
Trains the Hopfield network using the best timetable.
Uses the Hopfield network to further optimize the timetable.
Outputs the optimized timetable.
How the Solution Works

Data Parsing: The program reads the input files kfu-s-93.stu and kfu-s-93.crs to obtain the list of students and their respective exams as well as the details of each course. This data is crucial for evaluating timetables and ensuring that no student has overlapping exams.

Genetic Algorithm: The genetic algorithm begins by generating an initial population of random timetables. Each timetable is evaluated based on the number of exam conflicts it has. The algorithm then selects the best-performing timetables and uses crossover and mutation operations to create a new generation of timetables. This process is repeated for a specified number of generations, gradually improving the quality of the timetables.

Hopfield Network: Once the genetic algorithm has produced a high-quality timetable, the Hopfield network is used to further optimize it. The network is trained using the best timetable from the genetic algorithm. It then iteratively adjusts the timetable to minimize conflicts, leveraging the network's ability to recall and refine patterns.